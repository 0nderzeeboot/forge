/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("forge.java-conventions")
}

dependencies {
    api(project(":forge-core"))
    api(project(":forge-game"))
    api(project(":forge-ai"))
    api(project(":forge-gui"))
    api(libs.com.miglayout.miglayout.swing)
    api(libs.com.mortennobel.java.image.scaling)
    api(libs.org.powermock.powermock.module.testng.common)
    api(libs.net.bytebuddy.byte.buddy)
    api(libs.org.freemarker.freemarker)
    api(libs.com.googlecode.soundlibs.jlayer)
    api(libs.com.beust.jcommander)
    api(libs.com.sipgate.mp3.wav)
    api(libs.com.twelvemonkeys.imageio.imageio.jpeg)
    testImplementation(libs.org.testng.testng)
    testImplementation(libs.org.powermock.powermock.module.testng)
    testImplementation(libs.org.powermock.powermock.core)
    testImplementation(libs.org.powermock.powermock.api.mockito2)
    testImplementation(libs.org.powermock.powermock.api.support)
    testImplementation(libs.org.mockito.mockito.core)
    testImplementation(libs.net.bytebuddy.byte.buddy.agent)
    testImplementation(libs.org.objenesis.objenesis)
}

description = "Forge"

tasks.named<Test>("test") {
    useTestNG()

    print("Adding opens to test task")
    print("jvmArgs: " + jvmArgs)
    //jvmArgs?.addAll(kotlin.arrayOf("--add-opens java.base/java.util=ALL-UNNAMED", "--add-opens java.base/java.lang=ALL-UNNAMED", "--add-opens java.base/java.lang.reflect=ALL-UNNAMED", "--add-opens java.base/java.text=ALL-UNNAMED", "--add-opens java.desktop/java.awt.font=ALL-UNNAMED", "--add-opens java.base/jdk.internal.misc=ALL-UNNAMED", "--add-opens java.base/sun.nio.ch=ALL-UNNAMED", "--add-opens java.base/java.nio=ALL-UNNAMED", "--add-opens java.base/java.math=ALL-UNNAMED", "--add-opens java.base/java.util.concurrent=ALL-UNNAMED", "--add-opens java.desktop/java.awt=ALL-UNNAMED", "--add-opens java.base/java.net=ALL-UNNAMED", "--add-opens java.desktop/javax.swing=ALL-UNNAMED", "--add-opens java.desktop/java.beans=ALL-UNNAMED", "--add-opens java.desktop/javax.swing.border=ALL-UNNAMED", "-Dio.netty.tryReflectionSetAccessible=true"))

}
